---
title: Developing applications
weight: 10
last_reviewed_on: "2025-05-13"
review_in: 6 months
---

# Get started with the applications

GovWifi applications are written in [Ruby](https://www.ruby-lang.org/en/) using either [Rails](https://rubyonrails.org/) or [Sinatra](http://sinatrarb.com/) web frameworks. Our [infrastructure](https://github.com/alphagov/govwifi-terraform) is written in Terraform.

To get started you'll need Ruby installed on your system. We recommend using a Ruby version manager like [rbenv](https://github.com/rbenv/rbenv) which will allow you to install the correct version of Ruby for GovWifi projects.

We also recommend using the Terraform version manager [tfenv](https://github.com/tfutils/tfenv) to ensure we work with the same Terraform version.

If you are working on a Mac you can install both using [Homebrew]().

## Building a development / test environment

Each GovWifi application Github repository contains a [README](https://github.com/alphagov/govwifi-admin/blob/master/README.md) detailing how to build a development environment for running tests and making local changes.

Most of the projects use a combination of [Make](https://www.gnu.org/software/make/), [Docker](https://www.docker.com/) and [docker-compose](https://docs.docker.com/compose/) to create the necessary containers and seed data for a local development environment.

### Setting your AWS credentials as environment variables

If you need to connect to AWS to test a part of your code, you can generate temporary credentials using either the [gds-cli](https://github.com/alphagov/gds-cli) or the [cod-cli](https://github.com/GovWifi/cod-cli) command

To generate temporary AWS credentials:
`cod aws govwifi-development -e`

#### Testing applications whilst connecting to the AWS development environment

To generate AWS temporary credentials and pass them to a docker container:
`cod aws govwifi-development -e -- docker exec -it name-of-mycontainer /bin/sh`


## Bug and feature workflow

Please read the [GDS Git style guide](https://github.com/alphagov/styleguides/blob/master/git.md) which details how your code commits should be structured.

Once you're happy with your changes locally, submit a pull request. Raising a pull request in GitHub automatically notifies the #govwifi-monitoring Slack channel.

We follow the [GDS Way for pull request best practices](https://gds-way.cloudapps.digital/standards/pull-requests.html#content).

Pull request titles should be pithy and under Github's 72 character limit. If the PR is a work in progress add `WIP` to the title so GitHub won't alert in the #govwifi-monitoring channel.

Complete the pull request template by adding information to the "What" and "Why" sections:

```
### What
Describe the change

### Why
Describe why the change was necessary

```

If applicable, link to a Jira card or screen shots.

Pull requests are linted and tests are run on via GitHub Actions, the resulting status is shown on the PR.

## Merging and deploying changes

Once approved and merged your PR is automatically built and deployed to our development environment where you can perform further acceptance testing and [smoke testing](https://github.com/GovWifi/govwifi-smoke-tests). After that, deploying to production is a manual step in AWS Codepipeline.

Our pipelines include a step to force an update to the ECS tasks which are configured to use the latest image pushed to ECR.

The update ECS projects, exist in GovWifi AWS Production account, Codebuild. These are triggered by the GovWifi AWS Tools account, Codepipeline & Codebuild projects.
